# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Thu Aug 15 10:46:33 2024
#

import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from wx.lib.mixins import listctrl
import wx.lib.agw.ultimatelistctrl as ULC
import sys
from copy import deepcopy
class TableListCtrl(wx.ListCtrl, listctrl.ListCtrlAutoWidthMixin):
    def __init__(self, parent, ID, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0):
        wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
        listctrl.ListCtrlAutoWidthMixin.__init__(self)
        self.setResizeColumn(0)

class MyListCtrl(ULC.UltimateListCtrl):
    def __init__(self, parent, ID, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0):
        # super(MyListCtrl, self).__init__(id=ID, parent=parent, agwStyle=ULC.ULC_REPORT | ULC.ULC_HRULES)
        super(MyListCtrl, self).__init__(id=ID, parent=parent, size=size, style=style, agwStyle=wx.LC_REPORT|ULC.ULC_USER_ROW_HEIGHT|ULC.ULC_SINGLE_SEL|ULC.ULC_BORDER_SELECT|ULC.ULC_AUTO_TOGGLE_CHILD|ULC.ULC_HRULES|ULC.ULC_VRULES)

    def AppendColumn(self, header):
        self.InsertColumn(self.GetColumnCount(), header, format=ULC.ULC_FORMAT_LEFT)

    def AppendRow(self, datalist):
        print("Append: %s" % datalist)
        index = self.InsertStringItem(sys.maxsize, datalist[0])
        for column in range(1, len(datalist)):
            field = datalist[column]

            if type(field) is list:
                field = ", ".join(field)
            else:
                field = "%s" % field

            self.SetStringItem(index, column, field)
# end wxGlade


#
# data is the base of the config tree of data to be selected as a table
# fields is the fields within each data element that will be displayed in the list
# headers is the display-form of the field name (e.g. field='name' header='Node'
# editEntry is an optional dialog used to edit a table entry
#
class EditTable(wx.Dialog):
    def __init__(self, parent=None, title="Edit Table", data=None, schema=None, fields=[], headers=[], editEntry=None, *args, **kwds):
        self.parent = parent
        self.data = deepcopy(data)
        self.schema = schema
        self.fields = fields
        self.headers = headers
        self.editEntry = editEntry
        self.datachanged = False

        kwds['parent'] = parent

        # begin wxGlade: EditTable.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)

        mainSizer = wx.FlexGridSizer(2, 1, 0, 0)

        self.itemList = MyListCtrl(self, wx.ID_ANY, style=wx.LC_LIST)
        # Popluate the header
        for header in self.headers:
            self.itemList.AppendColumn(header)
        # Populate the rows
        for row in data:
            self.itemList.AppendRow([row[field] for field in self.fields])
        # Force autosize columns
        for col in range(0, len(self.headers) - 1):
            self.itemList.SetColumnWidth(col, width=wx.LIST_AUTOSIZE)
        self.itemList.SetColumnWidth(len(self.headers) - 1, width=-3) #AUTOSIZE_FILL last column
        mainSizer.Add(self.itemList, 1, wx.ALL | wx.EXPAND, 0)

        buttonSizer = wx.FlexGridSizer(1, 4, 0, 0)
        mainSizer.Add(buttonSizer, 0, wx.ALIGN_CENTER | wx.ALL, 5)

        self.buttonOk = wx.Button(self, wx.ID_OK, "")
        buttonSizer.Add(self.buttonOk, 0, 0, 0)

        self.buttonCancel = wx.Button(self, wx.ID_CANCEL, "")
        buttonSizer.Add(self.buttonCancel, 0, 0, 0)

        self.buttonNew = wx.Button(self, wx.ID_ADD, "")
        buttonSizer.Add(self.buttonNew, 0, 0, 0)

        self.buttonDelete = wx.Button(self, wx.ID_DELETE, "")
        buttonSizer.Add(self.buttonDelete, 0, 0, 0)

        mainSizer.AddGrowableRow(0)
        mainSizer.AddGrowableCol(0)
        self.SetSizer(mainSizer)
        mainSizer.Fit(self)

        self.SetAffirmativeId(self.buttonOk.GetId())
        self.SetEscapeId(self.buttonCancel.GetId())

        self.Layout()
        self.Maximize()
        self.Fit()
        self.Layout()
        self.SetTitle(title)

        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected, self.itemList)
        self.Bind(wx.EVT_BUTTON, self.OnAddButton, self.buttonNew)
        self.Bind(wx.EVT_BUTTON, self.OnDeleteButton, self.buttonDelete)
        # end wxGlade

    # On selected item, open editEntry dialog
    def OnItemSelected(self, event):  # wxGlade: EditTable.<event_handler>
        print("OnItemSelected: %s" % event.GetEventObject())
        item = event.GetEventObject()
        row = event.GetIndex()
        print("OnItemSelected: item is %s index is %d" % (str(item), row))
        print("Item data is %s text is %s" % (str(item.GetItem(row)), item.GetItem(row).GetText()))
        itemdata = deepcopy(self.data[row])
        print("Item data is %s" % itemdata)
        print("Item data schema is %s" % self.schema)

        if self.editEntry is not None:
            # item = event.GetEventObject()
            dlg = self.editEntry(self, item, schema=self.schema, data=itemdata)
            if dlg.ShowModal() is wx.ID_OK:
                # Change the parent data element with the results
                if dlg.IsDataChanged():
                    self.data[row] = dlg.GetData()
                    self.datachanged = True
                
        event.Skip()

    def OnAddButton(self, event):  # wxGlade: EditTable.<event_handler>
        print("Event handler 'OnAddButton' not implemented!")
        event.Skip()

    def OnDeleteButton(self, event):  # wxGlade: EditTable.<event_handler>
        print("Event handler 'OnDeleteButton' not implemented!")
        event.Skip()

    def IsDataChanged(self):
        return self.datachanged

    def GetData(self):
        return self.data

# end of class EditTable
