# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.1 on Fri Mar 19 10:57:37 2021
#

import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from EditTable import *
# end wxGlade


import traceback
try:
    from queue import Queue
except:
    from Queue import Queue


from PlotGraph import *
import time
import math
import numpy as np
import json
from vartab import *
import math
from ConfigDialog import *

CONFIGFILE = ".upsdisplay"


class UpsDisplayFrame(wx.Frame):

    DEFAULT_CONFIG = {
        'global': {
            # Global configuration goes here
        },
        'available': [
            # List of available devices seen by scanner
        ],
        'nodeschema': {
            'name': str,                # name is a string
            'dns': str,                 # nns is a string (but should be smarter)
            'uri': str,                 # uri is a string (but should be smarter)
            'requres': [ "<node>" ],    # requires is a list of <node names>
            'wants': [ "<node>" ],      # wants is a list of <node names>
            'start': str,               # start is a string (action function)
            'stop': str,                # stop is a string (action function)
            'main': bool,               # main is a boolean (show on main page if True)
        },
        'nodeheaders': {
            'name': "Name",
            'dns': "Dns",
            'uri': "URI",
            'requires': "Requires",
            'wants': "Wants",
            'start': "Start Action",
            'stop': "Stop Action",
            'main': "On Main Page",
        },
        'nodedata': [{
            'name': 'Nimbus',
            'dns': "nimbus.aerodesic.net",
            'uri': 'APC1:1',
            'requires': ["Nas3"],
            'wants': ["Nas1", "Nas2"],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': True,
        },{
            'name': "Cumulus",
            'dns': "cumulus.aerodesic.net",
            'uri': 'APC1:2',
            'requires': ["Nas3"],
            'wants': [],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': False,
        },{
            'name': "Nas1",
            'dns': "nas1.aerodesic.net",
            'uri': 'APC1:3',
            'requires': ["Nas3"],
            'wants': [],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': False,
        },{
            'name': "Nas2",
            'dns': "nimbus.aerodesic.net",
            'uri': 'APC1:4',
            'requires': ["Nas3"],
            'wants': [],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': False,
        },{
            'name': "Nas3",
            'dns': "nas3.aerodesic.net",
            'uri': 'APC1:5',
            'requires': [],
            'wants': ["Gatekeeper"],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': False,
        },{
            'name': "Gatekeeper",
            'dns': 'gatekeeper.aerodesic.net',
            'uri': 'APC1:6',
            'requires': [ "DmzSwitch", "NasSwitch" ],
            'wants': [],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': False,
        },{
            'name': "DmzSwitch",
            'dns': '',
            'uri': 'APC1:7',
            'requires': [],
            'wants': [],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': False,
        },{
            'name': "NasSwitch",
            'dns': '',
            'uri': 'APC1:8',
            'requires': [],
            'wants': [],
            'start': 'apcstart',
            'stop': 'apcstop',
            'main': False,
        }],
    }

    def __init__(self, *args, **kwds):
        self.config = self.DEFAULT_CONFIG

        # begin wxGlade: UpsDisplayFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.MAXIMIZE | wx.STAY_ON_TOP
        wx.Frame.__init__(self, *args, **kwds)
        self.SetTitle(_("UPS and PDU control"))

        self.mainPanel = wx.Panel(self, wx.ID_ANY)

        self.mainSizer = wx.FlexGridSizer(3, 1, 0, 3)

        topSizer = wx.FlexGridSizer(1, 0, 0, 0)
        self.mainSizer.Add(topSizer, 1, wx.ALL | wx.EXPAND, 5)

        self.text_ctrl_1 = wx.TextCtrl(self.mainPanel, wx.ID_ANY, "", style=wx.TE_READONLY)
        topSizer.Add(self.text_ctrl_1, 0, wx.EXPAND, 0)

        self.statusSizer = wx.FlexGridSizer(0, 2, 10, 0)
        self.mainSizer.Add(self.statusSizer, 1, wx.ALL | wx.EXPAND, 5)

        buttonSizer = wx.FlexGridSizer(1, 3, 5, 10)
        self.mainSizer.Add(buttonSizer, 1, wx.ALIGN_CENTER, 0)

        self.nodeConfigButton = wx.Button(self.mainPanel, wx.ID_ANY, _("Nodes"))
        self.nodeConfigButton.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        buttonSizer.Add(self.nodeConfigButton, 0, 0, 0)

        self.deviceConfigButton = wx.Button(self.mainPanel, wx.ID_ANY, _("Devices"))
        self.deviceConfigButton.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        buttonSizer.Add(self.deviceConfigButton, 0, 0, 0)

        buttonSizer.AddGrowableCol(0)

        self.statusSizer.AddGrowableCol(1)

        topSizer.AddGrowableCol(0)

        self.mainSizer.AddGrowableRow(1)
        self.mainSizer.AddGrowableCol(0)
        self.mainPanel.SetSizer(self.mainSizer)

        self.mainSizer.Fit(self)
        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.OnNodeConfigButton, self.nodeConfigButton)
        self.Bind(wx.EVT_BUTTON, self.OnDevicesConfigButton, self.deviceConfigButton)
        self.Bind(wx.EVT_CLOSE, self.OnClose, self)
        # end wxGlade

        # self.ReloadObjects()

        self.statusSizer.Layout()
        self.mainSizer.Layout()
        self.Fit()

    def CloseUps(self):
        pass

    def OnClose(self, event):  # wxGlade: UpsDisplayFrame.<event_handler>
        print('OnClose called')
        self.CloseUps()
        event.Skip()

    def OnNodeConfigButton(self, event):  # wxGlade: UpsDisplayFrame.<event_handler>
        # Fields to display
        fields=['name', 'uri', 'requires', 'wants', 'main']

        # Headers for the fields to display
        headers=[self.config['nodeheaders'][node] for node in fields]

        dlg=EditTable(self, title="Edit Nodes", data=self.config['nodedata'],  schema=self.config['nodeschema'], fields=fields, headers=headers, editEntry=None)
        if dlg.ShowModal() == wx.ID_OK:
            print(self.config[Nodes])
        event.Skip()

    def OnDevicesConfigButton(self, event):  # wxGlade: UpsDisplayFrame.<event_handler>
        print("Event handler 'OnDevicesConfigButton' not implemented!")
        event.Skip()
# end of class UpsDisplayFrame

