# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.1 on Fri Apr  2 13:57:56 2021
#

import wx
import sys

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from TextCheckboxSelect import *
# end wxGlade

class ConfigDialog(wx.Dialog):
    def __init__(self, parent=None, *args, **kwds):
        kwds['parent'] = parent

        # begin wxGlade: ConfigDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER | wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle(_("dialog"))

        self.mainSizer = wx.FlexGridSizer(2, 1, 0, 0)

        self.configuration = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.configuration.AppendColumn(_("Device"), format=wx.LIST_FORMAT_LEFT, width=-1)
        self.configuration.AppendColumn(_("Uri"), format=wx.LIST_FORMAT_LEFT, width=-1)
        self.mainSizer.Add(self.configuration, 1, wx.EXPAND, 0)

        buttonSizer = wx.StdDialogButtonSizer()
        self.mainSizer.Add(buttonSizer, 1, wx.ALIGN_CENTER | wx.ALL, 5)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        buttonSizer.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        buttonSizer.AddButton(self.button_CANCEL)

        buttonSizer.Realize()

        self.mainSizer.AddGrowableRow(0)
        self.mainSizer.AddGrowableCol(0)
        self.SetSizer(self.mainSizer)
        self.mainSizer.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        self.Maximize()
        # end wxGlade

    def OnRescanButton(self, event):  # wxGlade: ConfigDialog.<event_handler>
        print("Event handler 'OnRescanButton' not implemented!")
        event.Skip()

    def OnDeviceListSelect(self, event):
        activator = event.GetEventObject()
        raw_selected = activator.GetLineText(0)
        selected = raw_selected.split(' ') if len(raw_selected) != 0 else []
        wanted = TextCheckboxSelect(self, title=_("Select a device"), choose_one=choose_one, choices=self.devices_available, selected=selected)
        if wanted.ShowModal() == wx.ID_OK:
            results = wanted.GetSelectedItems()
            activator.ChangeValue(" ".join(results))
            self.Fit()
            self.Show()
        event.Skip()

    # Config is a dictionary containing:
    #     'available': [ <list of device names available> ],
    #     'devices': {
    #         '<device name>': {
    #             'uri': <text of uri to contact device>,
    #             'requires': [ <list of devices that are required to be on to enable this device> ],
    #             'wants': [ <list of devices that should be on to enable this device> ],
    #             'start': <action to start this device>,
    #             'stop': <action to stop this device>,
    #             'main': <True if to place on main screen>,
    #         }
    #     }
    def LoadConfig(self, config):
        self.config = config

        # Load the device ListCtrl
        for device in self.config['devices']:
            index = self.configuration.InsertStringItem(sys.maxsize, device)

    # Return a list of unused devices
    def GetUnusedDevices(self):
        unused = self.config['available'] if 'available' in self.config else []
        if 'devices' in self.config:
            for device in self.config['devices']:
                del(unused[device])
        return unused

    def GetConfig(self):
        return config

# end of class ConfigDialog
